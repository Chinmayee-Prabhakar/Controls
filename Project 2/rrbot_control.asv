rosshutdown; clear; close; clc;
% ROS Setup
rosinit;
j1_effort = rospublisher('/rrbot/joint1_effort_controller/command');
j2_effort = rospublisher('/rrbot/joint2_effort_controller/command');
JointStates = rossubscriber('/rrbot/joint_states');
tau1 = rosmessage(j1_effort);
tau2 = rosmessage(j2_effort);
tau1.Data = 0;
tau2.Data = 0;
send(j1_effort,tau1);
send(j2_effort,tau2);
client = rossvcclient('/gazebo/set_model_configuration');
req = rosmessage(client);
req.ModelName = 'rrbot';
req.UrdfParamName = 'robot_description';
req.JointNames = {'joint1','joint2'};
req.JointPositions = [deg2rad(30), deg2rad(45)];
resp = call(client,req,'Timeout',3);

K = [48.5252,   46.3717 ,   16.9655  , 13.2697; 12.9767  , 18.1688  ,  5.0128  ,  4.5539];
Pos = [];
Vel = [];
time = [];
tic;
t = 0;
while(t < 10)
t = toc;
% read the joint states
jointData = receive(JointStates);
% inspect the "jointData" variable in MATLAB to get familiar with its structure
theta1 = jointData.Position(1);
theta2 = jointData.Position(2);
theta1_dot = jointData.Velocity(1);
theta2_dot = jointData.Velocity(2);
% implement your state feedback controller below
U = -K*[theta1; theta2; theta1_dot; theta2_dot];
tau1.Data = U(1);
tau2.Data = U(2);
Pos(:, n) = jointData.Position;
Vel(:,n)
display(jointData.Position);
send(j1_effort,tau1);
send(j2_effort,tau2);
% sample the time, joint state values, and calculated torques here to be plotted at the end
end
tau1.Data = 0;
tau2.Data = 0;
send(j1_effort,tau1);
send(j2_effort,tau2);
% disconnect from roscore
rosshutdown;
% plot the trajectories